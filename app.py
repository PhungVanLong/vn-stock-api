# =================================================================
# 1. IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT
# =================================================================
from flask import Flask, jsonify, request
from flask_cors import CORS
from vnstock.explorer.vci.quote import Quote
from datetime import datetime, timedelta
from concurrent.futures import ThreadPoolExecutor

# =================================================================
# 2. KH·ªûI T·∫†O ·ª®NG D·ª§NG FLASK
# =================================================================
app = Flask(__name__)
CORS(app)  # Cho ph√©p truy c·∫≠p t·ª´ m·ªçi ngu·ªìn (Cross-Origin Resource Sharing)

# =================================================================
# 3. C√ÅC H√ÄM H·ªñ TR·ª¢ (HELPERS)
# =================================================================
def parse_symbols(symbols_str):
    """
    T√°ch chu·ªói c√°c m√£ c·ªï phi·∫øu (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y) th√†nh m·ªôt danh s√°ch.
    V√≠ d·ª•: "ACB, FPT, VCB " -> ['ACB', 'FPT', 'VCB']
    """
    if not symbols_str:
        return []
    return [s.strip().upper() for s in symbols_str.split(',') if s.strip()]

def fetch_price_for_symbol(symbol):
    """
    L·∫•y d·ªØ li·ªáu gi√° cho M·ªòT m√£ c·ªï phi·∫øu. 
    H√†m n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y trong m·ªôt lu·ªìng (thread) ri√™ng bi·ªát.
    """
    try:
        # L·∫•y d·ªØ li·ªáu trong 7 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ gi√° tr·ªã
        start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        
        quote = Quote(symbol=symbol)
        price_data = quote.history(start=start_date, end=end_date)
        
        if not price_data.empty:
            # Tr·∫£ v·ªÅ tuple (m√£, d·ªØ li·ªáu) n·∫øu th√†nh c√¥ng
            return symbol, price_data.tail(1).to_dict('records')[0]
        else:
            # Tr·∫£ v·ªÅ tuple (m√£, th√¥ng b√°o l·ªói) n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
            return symbol, f'Kh√¥ng c√≥ d·ªØ li·ªáu gi√° cho {symbol}'
    except Exception as e:
        # Tr·∫£ v·ªÅ tuple (m√£, th√¥ng b√°o l·ªói) n·∫øu c√≥ exception
        return symbol, str(e)

# =================================================================
# 4. ƒê·ªäNH NGHƒ®A C√ÅC ROUTE (API ENDPOINTS)
# =================================================================

# --- Route ch√≠nh - Trang ch·ªß ---
@app.route('/')
def home():
    """Hi·ªÉn th·ªã th√¥ng tin chung v√† danh s√°ch c√°c API endpoints."""
    return jsonify({
        'message': 'VNStock REST API Server - High Performance Edition',
        'version': '2.0',
        'vnstock_version': '3.2.5',
        'endpoints_optimized': {
            '/api/stocks/price?symbols=ACB,FPT,VCB': '‚ö° (T·ªêI ∆ØU) L·∫•y gi√° nhi·ªÅu m√£ ƒë·ªìng th·ªùi',
        },
        'endpoints_single_symbol': {
            '/api/stock/<symbol>': 'Th√¥ng tin t·ªïng quan c·ªï phi·∫øu',
            '/api/stock/<symbol>/price': 'Gi√° hi·ªán t·∫°i (1 m√£)',
            '/api/stock/<symbol>/history': 'L·ªãch s·ª≠ gi√°',
            '/api/stock/<symbol>/company': 'Th√¥ng tin c√¥ng ty',
            '/api/stock/<symbol>/intraday': 'D·ªØ li·ªáu trong ng√†y',
        },
        'example_usage': 'http://localhost:5000/api/stocks/price?symbols=ACB,FPT,TCB,HPG,VNM,MWG'
    })

# --- ‚ú® ENDPOINT T·ªêI ∆ØU: L·∫§Y GI√Å NHI·ªÄU M√É ƒê·ªíNG TH·ªúI ---
@app.route('/api/stocks/price')
def get_stocks_price():
    """
    X·ª≠ l√Ω y√™u c·∫ßu l·∫•y gi√° cho nhi·ªÅu m√£ c·ªï phi·∫øu m·ªôt c√°ch ƒë·ªìng th·ªùi.
    S·ª≠ d·ª•ng ThreadPoolExecutor ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô ph·∫£n h·ªìi.
    """
    symbols_str = request.args.get('symbols')
    symbols = parse_symbols(symbols_str)

    if not symbols:
        return jsonify({
            'success': False,
            'error': 'Vui l√≤ng cung c·∫•p m√£ c·ªï phi·∫øu. V√≠ d·ª•: ?symbols=ACB,FPT,VCB'
        }), 400

    print(f"‚ö°Ô∏è Concurrent Request: L·∫•y gi√° cho c√°c m√£: {', '.join(symbols)}")

    results = {}
    errors = {}

    # S·ª≠ d·ª•ng ThreadPoolExecutor ƒë·ªÉ ch·∫°y c√°c t√°c v·ª• l·∫•y d·ªØ li·ªáu song song
    # max_workers=10 nghƒ©a l√† ch·∫°y t·ªëi ƒëa 10 lu·ªìng c√πng l√∫c
    with ThreadPoolExecutor(max_workers=10) as executor:
        # G·ª≠i t·∫•t c·∫£ c√°c y√™u c·∫ßu l·∫•y d·ªØ li·ªáu c√πng l√∫c
        future_results = executor.map(fetch_price_for_symbol, symbols)

        # Thu th·∫≠p k·∫øt qu·∫£ khi ch√∫ng ho√†n th√†nh
        for symbol, data_or_error in future_results:
            if isinstance(data_or_error, dict):  # N·∫øu k·∫øt qu·∫£ l√† d·ªØ li·ªáu (dict) -> th√†nh c√¥ng
                results[symbol] = data_or_error
            else:  # N·∫øu k·∫øt qu·∫£ l√† chu·ªói (string) -> l√† th√¥ng b√°o l·ªói
                errors[symbol] = data_or_error

    return jsonify({
        'success': True,
        'data': results,
        'errors': errors
    })

# --- C√ÅC ENDPOINT C≈® (X·ª¨ L√ù 1 M√É) - GI·ªÆ ƒê·ªÇ T∆Ø∆†NG TH√çCH ---

@app.route('/api/stock/<symbol>')
def get_stock_overview(symbol):
    try:
        quote = Quote(symbol=symbol.upper())
        overview = quote.overview()
        if overview.empty:
            return jsonify({'success': False, 'error': f'Kh√¥ng t√¨m th·∫•y th√¥ng tin cho m√£ {symbol.upper()}'}), 404
        return jsonify({'success': True, 'symbol': symbol.upper(), 'data': overview.to_dict('records')[0]})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400

@app.route('/api/stock/<symbol>/price')
def get_stock_price(symbol):
    try:
        quote = Quote(symbol=symbol.upper())
        price_data = quote.history(start=(datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'), end=datetime.now().strftime('%Y-%m-%d'))
        if price_data.empty:
            return jsonify({'success': False, 'error': f'Kh√¥ng c√≥ d·ªØ li·ªáu gi√° cho {symbol.upper()}'}), 404
        return jsonify({'success': True, 'symbol': symbol.upper(), 'data': price_data.tail(1).to_dict('records')[0]})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400

@app.route('/api/stock/<symbol>/history')
def get_stock_history(symbol):
    try:
        start = request.args.get('start', (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'))
        end = request.args.get('end', datetime.now().strftime('%Y-%m-%d'))
        quote = Quote(symbol=symbol.upper())
        history = quote.history(start=start, end=end)
        if history.empty:
            return jsonify({'success': False, 'error': f'Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ cho {symbol.upper()}'}), 404
        return jsonify({'success': True, 'symbol': symbol.upper(), 'period': {'start': start, 'end': end}, 'count': len(history), 'data': history.to_dict('records')})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 400

# =================================================================
# 5. KH·ªûI CH·∫†Y SERVER
# =================================================================
if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ VNStock REST API Server - High Performance Edition")
    print("=" * 60)
    print("üìç URL: http://localhost:5000")
    print("üìö T√†i li·ªáu API: http://localhost:5000/")
    print("\n‚úÖ Endpoint t·ªëi ∆∞u t·ªëc ƒë·ªô (khuy√™n d√πng):")
    print("   ‚Ä¢ http://localhost:5000/api/stocks/price?symbols=ACB,FPT,TCB,HPG,VNM,VIC,VHM,VCB,TCB,BID,MBB,HPG")
    print("\nüí° M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p URL tr√™n ƒë·ªÉ xem k·∫øt qu·∫£ JSON.")
    print("=" * 60)
    app.run(host='0.0.0.0', port=5000, debug=True)